swagger: '2.0'
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: '1.0.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: '#/definitions/Login'
      produces:
        - application/json
      responses:
        '200':
          description: Login Successfully
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: Signup Successfully
          schema:
            $ref: '#/definitions/UserResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/profile:
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          schema:
            example: Bearer <JWT token>
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ProfileResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: Update User Profile
      description: API for updating a user profile
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          schema:
            example: Bearer <JWT token>
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ProfileResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/accounts:
    get:
      security:
        - Bearer: []
      tags:
        - Accounts Module
      summary: User Accounts API
      description: API for fetching user's accounts
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          schema:
            example: Bearer <JWT token>
        - name: minDate
          in: query
          description: Minimum date that need to be considered for filter
          require: false
          schema:
            type: string
            example: aaaa-mm-jj
        - name: maxDate
          in: query
          description: Maximum date that need to be considered for filter
          require: false
          schema:
            type: string
            example: aaaa-mm-jj
      produces:
        - application/json
      responses:
        '200':
          description: User's accounts retrieved successully
          schema:
            $ref: '#/definitions/AccountsResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/accounts/{accountId}:
    get:
      security:
        - Bearer: []
      tags:
        - Accounts Module
      summary: find Account by ID
      description: API for fetching a single account 
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          schema:
            example: Bearer <JWT token>
        - name: accountId
          in: paths
          description: ID of the account that needs to be fetched
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: "6881fefbcf58f8149b1b4bcb"
            description: "MongoDB ObjectId"
        - name: minDate
          in: query
          description: Minimum date that need to be considered for filter
          require: false
          schema:
            type: string
            example: aaaa-mm-jj
        - name: maxDate
          in: query
          description: Maximum date that need to be considered for filter
          require: false
          schema:
            type: string
            example: aaaa-mm-jj
      produces:
        - application/json
      responses:
        '200':
          description: User's account retrieved successully
          schema:
            $ref: '#/definitions/SingleAccountResponse'
        '400':
          description: Invalid ID
        '404':
          description: Account not found
        '500':
          description: Internal Server Error
  /user/transactions/{transactionId}:
    get:
      security:
        - Bearer: []
      tags:
        - Accounts Module
      summary: find Transaction by ID
      description: API for fetching a single transactions 
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          schema:
            example: Bearer <JWT token>
        - name: transactionId
          in: paths
          description: ID of the transaction that needs to be fetched
          required: true
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
            example: "6881fefbcf58f8149b1b4bcb"
            description: "MongoDB ObjectId"
      produces:
        - application/json
      responses:
        '200':
          description: transaction retrieved successully
          schema:
            $ref: '#/definitions/SingleTransactionResponse'
        '400':
          description: Invalid ID
        '404':
          description: Transaction not found
        '500':
          description: Internal Server Error
    patch:
      security:
        - Bearer: []
      tags:
        - Accounts Module
      summary: update Transaction
      description: API for updating category or notes of a transactions 
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
          schema:
            example: Bearer <JWT token>
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              category:
                type: string
                enum:
                  - food
                  - shopping
                  - credits
                  - kids
                  - health care
                  - transport
                example: food
              notes:
                type: string
                example: "Updated notes"
      produces:
        - application/json
      responses:
        '200':
          description: User's account retrieved successully
          schema:
            $ref: '#/definitions/SingleTransactionResponse'
        '400':
          description: Invalid request data
        '500':
          description: Internal Server Error
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  LoginResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          token:
            type: string
  UserResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
          password:
            type: string
          firstName:
            type: string
          lastName:
            type: string
          createdAt:
            type: string
          updatedAt:
            type: string
  ProfileResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          email:
            type: string
          firstName:
            type: string
          lastName:
            type: string
          createdAt:
            type: string
          updatedAt:
            type: string
          id:
            type: string
  UserProfile:
    properties:
      firstName:
        type: string
      lastName:
        type: string
  Transaction:
    type: object
    properties:
      id:
        type: string
      date:
        type: string
      description:
        type: string
      amount:
        type: number
      balance:
        type: string
      type:
        type: string
      category:
        type: string
      notes:
        type: string
  Account:
    type: object
    properties:
      accountId:
        type: string
      accountName: 
        type: string
      accountAmount: 
        type: number
      accountBalance:
        type: string
      accountTransactions:
        type: array
        items:
          $ref: "#/definitions/Transaction"
  AccountsResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: array
        items:
          $ref: "#/definitions/Account"
  SingleAccountResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        $ref: "#/definitions/Account"
  SingleTransactionResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        $ref: "#/definitions/Transaction"

